!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
LIST_FOREACH	list.h	39;"	d
List	list.h	/^typedef struct List {$/;"	s
List	list.h	/^} List;$/;"	t	typeref:struct:List
ListNode	list.h	/^typedef struct ListNode {$/;"	s
ListNode	list.h	/^} ListNode;$/;"	t	typeref:struct:ListNode
ListNode_swap	list_algos.c	/^inline void ListNode_swap(ListNode *a, ListNode *b){$/;"	f
List_bubble_sort	list_algos.c	/^int List_bubble_sort(List *list, List_compare cmp){$/;"	f
List_clear	list.c	/^void List_clear(List *list){			\/\/清除value指向的内存$/;"	f
List_clear_destroy	list.c	/^void List_clear_destroy(List *list){$/;"	f
List_compare	list_algos.h	/^typedef int (*List_compare)(const void *a, const void *b);$/;"	t
List_count	list.h	25;"	d
List_create	list.c	/^List *List_create(){$/;"	f
List_destroy	list.c	/^void List_destroy(List *list){			\/\/从第一个遍历到最后一个$/;"	f
List_first	list.h	26;"	d
List_last	list.h	27;"	d
List_merge	list_algos.c	/^inline List *List_merge(List *left, List *right, List_compare cmp){	\/\/不同粒度下相同的合并方法$/;"	f
List_merge_sort	list_algos.c	/^List *List_merge_sort(List *list, List_compare cmp){$/;"	f
List_pop	list.c	/^void *List_pop(List *list){$/;"	f
List_push	list.c	/^void List_push(List *list, void *value){$/;"	f
List_remove	list.c	/^void *List_remove(List *list, ListNode *node){		\/\/分四种情况删除某点$/;"	f
List_shift	list.c	/^void *List_shift(List *list){$/;"	f
List_unshift	list.c	/^void List_unshift(List *list, void *value){			\/\/在链表的头部插入节点$/;"	f
NDEBUG	ringbuffer.c	1;"	d	file:
QUEUE_FOREACH	queue.h	19;"	d
QUEUE_H	queue.h	2;"	d
Queue	queue.h	/^typedef List Queue;$/;"	t
Queue_clear	queue.h	10;"	d
Queue_clear_destroy	queue.h	11;"	d
Queue_count	queue.h	16;"	d
Queue_create	queue.h	8;"	d
Queue_destroy	queue.h	9;"	d
Queue_peek	queue.h	17;"	d
Queue_recv	queue.h	14;"	d
Queue_send	queue.h	13;"	d
RingBuffer	ringbuffer.h	/^} RingBuffer;$/;"	t	typeref:struct:__anon1
RingBuffer_available_data	ringbuffer.h	31;"	d
RingBuffer_available_space	ringbuffer.h	34;"	d
RingBuffer_clear	ringbuffer.h	59;"	d
RingBuffer_commit_read	ringbuffer.h	53;"	d
RingBuffer_commit_write	ringbuffer.h	56;"	d
RingBuffer_create	ringbuffer.c	/^RingBuffer *RingBuffer_create(int length)$/;"	f
RingBuffer_destroy	ringbuffer.c	/^void RingBuffer_destroy(RingBuffer * buffer)$/;"	f
RingBuffer_empty	ringbuffer.h	39;"	d
RingBuffer_ends_at	ringbuffer.h	50;"	d
RingBuffer_full	ringbuffer.h	37;"	d
RingBuffer_get_all	ringbuffer.h	44;"	d
RingBuffer_gets	ringbuffer.c	/^bstring RingBuffer_gets(RingBuffer * buffer, int amount)$/;"	f
RingBuffer_puts	ringbuffer.h	41;"	d
RingBuffer_read	ringbuffer.c	/^int RingBuffer_read(RingBuffer * buffer, char *target, int amount)$/;"	f
RingBuffer_starts_at	ringbuffer.h	47;"	d
RingBuffer_write	ringbuffer.c	/^int RingBuffer_write(RingBuffer * buffer, char *data, int length)$/;"	f
STACK_FOREACH	stack.h	18;"	d
STACK_H	stack.h	2;"	d
Stack	stack.h	/^typedef List Stack;$/;"	t
Stack_clear	stack.h	9;"	d
Stack_clear_destroy	stack.h	10;"	d
Stack_count	stack.h	16;"	d
Stack_create	stack.h	7;"	d
Stack_destroy	stack.h	8;"	d
Stack_peek	stack.h	14;"	d
Stack_pop	stack.h	13;"	d
Stack_push	stack.h	12;"	d
__dbg_h__	dbg.h	2;"	d
_lcthw_RingBuffer_h	ringbuffer.h	2;"	d
buffer	ringbuffer.h	/^    char *buffer;$/;"	m	struct:__anon1
check	dbg.h	28;"	d
check_debug	dbg.h	36;"	d
check_mem	dbg.h	34;"	d
clean_errno	dbg.h	15;"	d
count	list.h	/^	int count;$/;"	m	struct:List
debug	dbg.h	11;"	d
debug	dbg.h	9;"	d
end	ringbuffer.h	/^    int end;$/;"	m	struct:__anon1
first	list.h	/^	ListNode *first;$/;"	m	struct:List
last	list.h	/^	ListNode *last;$/;"	m	struct:List
lcthw_List_algos_h	list_algos.h	2;"	d
lcthw_List_h	list.h	2;"	d
length	ringbuffer.h	/^    int length;$/;"	m	struct:__anon1
log_err	dbg.h	17;"	d
log_info	dbg.h	25;"	d
log_warn	dbg.h	21;"	d
next	list.h	/^	struct ListNode *next;$/;"	m	struct:ListNode	typeref:struct:ListNode::ListNode
prev	list.h	/^	struct ListNode *prev;$/;"	m	struct:ListNode	typeref:struct:ListNode::ListNode
sentinel	dbg.h	31;"	d
start	ringbuffer.h	/^    int start;$/;"	m	struct:__anon1
value	list.h	/^	void *value;$/;"	m	struct:ListNode
